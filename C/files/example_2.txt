import com.fazecast.jSerialComm.SerialPort;
import com.fazecast.jSerialComm.SerialPortDataListener;
import com.fazecast.jSerialComm.SerialPortEvent;
import javax.swing.*;

import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


public class AppLayout {
    public static SerialPort serialPort;
    public static JFrame frame; public static JTextArea txt; public static JTextField tf_msm;
    public static JLabel image_addFile; public static JLabel image_send;
    public static String Diretory = Paths.get("").toAbsolutePath().toString();
    public static boolean recebemosFicheiro = false;
    public static ArrayList<byte[]> listadados = new ArrayList<>();
    public static  int x = 0;

    public void start(){
        PortaSerieconfig();
        runApp();
        verSerialPort();
    }


    public void PortaSerieconfig(){
        serialPort = SerialPort.getCommPorts()[2];
        serialPort.setComPortParameters(115200, 8, 1,0);
        serialPort.openPort();
        System.out.println("Porta Serie Selecionada: "+ serialPort.getSystemPortName());
    }

    public void runApp(){

        ImageIcon send = new ImageIcon("/Users/a2705/Desktop/Projects/paper-plane.png");
        Image imagem = send.getImage();
        Image newImg = imagem.getScaledInstance(25, 25,  Image.SCALE_SMOOTH);
        send = new ImageIcon(newImg);

        ImageIcon addFile = new ImageIcon("/Users/a2705/Desktop/Projects/add.png");
        Image imagem2 = addFile.getImage();
        Image newImg2 = imagem2.getScaledInstance(25,25, Image.SCALE_SMOOTH);
        addFile = new ImageIcon(newImg2);


        frame = new JFrame("Chat"); frame.setSize(800,500);
        frame.setLocationRelativeTo(null);
        frame.getContentPane().setBackground(Color.white);

        txt = new JTextArea(30,80); txt.setBounds(0,0,400,410);
        txt.setEditable(false); txt.setBackground(Color.LIGHT_GRAY); txt.setForeground(Color.DARK_GRAY);
        txt.setFont(new Font("Dialog", Font.PLAIN, 40));
        frame.getContentPane().add(txt, BorderLayout.WEST);

        tf_msm = new JTextField();
        tf_msm.setPreferredSize(new Dimension(600,30));
        tf_msm.setFont(new Font("Dialog", Font.PLAIN, 20));
        frame.getContentPane().add(tf_msm, BorderLayout.CENTER);

        image_addFile = new JLabel(addFile);
        image_addFile.setPreferredSize(new Dimension(30,30));

        image_send = new JLabel(send);
        image_send.setPreferredSize(new Dimension(50,30));



        JPanel panel = new JPanel(); panel.setBounds(0,0,800,40);
        panel.add(image_addFile, BorderLayout.BEFORE_LINE_BEGINS);
        panel.add(tf_msm, BorderLayout.CENTER);
        panel.add(image_send, BorderLayout.LINE_END);


        frame.add(panel, BorderLayout.AFTER_LAST_LINE);

        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);


        /***** Handler btn anexar *****/
        image_addFile.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent e)
            {
                try {   EnviarFicheiro();     } catch (IOException ioException) { System.out.println("Ficheiro Inexistente..."); }
            }
        });


        /***** Handler btn send *****/
        image_send.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent e)
            {
                String msgTsend = tf_msm.getText();
                tf_msm.setText(null);
                txt.append("\nEu: " + msgTsend);
                EnviarMensagem(msgTsend);
            }
        });

    }

    public void verSerialPort(){

        serialPort.addDataListener(new SerialPortDataListener() {
            @Override
            public int getListeningEvents() {
                return SerialPort.LISTENING_EVENT_DATA_AVAILABLE;
            }
            @Override
            public void serialEvent(SerialPortEvent event) {
                if (event.getEventType() != SerialPort.LISTENING_EVENT_DATA_AVAILABLE)  return;
                byte[] dadosrecebidos = new byte[serialPort.bytesAvailable()];
                int numeroLidosBytes = serialPort.readBytes(dadosrecebidos, dadosrecebidos.length);

                if(ficheiroRecebido(dadosrecebidos) || recebemosFicheiro|| Arrays.toString(dadosrecebidos).contains("-119, 80, 78,")){
                    System.out.println("File: Leu " + numeroLidosBytes + " bytes."+ new String(dadosrecebidos, StandardCharsets.US_ASCII));
                    recebemosFicheiro=true;
                    listadados.add(dadosrecebidos);

                    if(ficheiroTextoTerminado(dadosrecebidos)) {
                        recebemosFicheiro=false;
                        try { saveReceivedFile(); } catch (IOException e) { e.printStackTrace(); }

                    } else if (ficheiroImagemTerminado(dadosrecebidos)) {
                        recebemosFicheiro = false;
                        try {   saveReceivedImage();    } catch (IOException e) { e.printStackTrace(); }
                    }
                }

                else if(!recebemosFicheiro){
                    System.out.println("Leu "+new String(dadosrecebidos, StandardCharsets.US_ASCII));
                    String mensagemRecebida = new String(dadosrecebidos, StandardCharsets.US_ASCII);
                    txt.append("\nDiogo: "+mensagemRecebida.substring(9,mensagemRecebida.length()-1));
                }
            }
        });
    }  /** Verificar se existem dados na Serial Port **/


    public void EnviarMensagem(String mensagemEnviada){
        int dadosEscritosnaPorta = 0;
        String beginMsg = "MIETI-MSG";
        byte[] startMessage = beginMsg.getBytes(StandardCharsets.US_ASCII);

        byte[] bytesToSend = mensagemEnviada.getBytes(StandardCharsets.US_ASCII);

        serialPort.writeBytes(startMessage, startMessage.length );

        while(dadosEscritosnaPorta < bytesToSend.length){
            dadosEscritosnaPorta += serialPort.writeBytes(bytesToSend, bytesToSend.length, dadosEscritosnaPorta);
        }

        System.out.println("Escreveu " + dadosEscritosnaPorta + " para a Porta Serie");
    }


    public String EscolherFicheiroEnviar(){
        FileDialog dialog = new FileDialog(frame, "Select File");
        dialog.setMode(FileDialog.LOAD);
        dialog.pack();
        dialog.setLocationRelativeTo(null);
        dialog.setMultipleMode(false);
        dialog.setVisible(true);

        System.out.println(dialog.getDirectory());

        return dialog.getDirectory() + dialog.getFile();

    }


    public void EnviarFicheiro() throws IOException {
        int bytesEscritos = 0;
        String beginFile = "MIETI-File";
        String endFile = "Ends";
        byte[] inicioFile = beginFile.getBytes(StandardCharsets.US_ASCII);
        String fileToSend = EscolherFicheiroEnviar();

        if( fileToSend.contains(".png")){
            File file = new File(fileToSend);
            FileInputStream fis = new FileInputStream(file);
            ByteArrayOutputStream d = new ByteArrayOutputStream();
            byte[] buf = new byte[1024];
            try {
                for (int readbytes; (readbytes = fis.read(buf)) != -1;) {
                    //Writes to this byte array output stream
                    d.write(buf, 0, readbytes); //escrever os dados para enviar no ByteArrayOutputStream
                    System.out.println("Leu " + readbytes + " bytes,");
                }
            } catch (IOException ex) {
                System.out.println("Excecao ocorreu :" + ex.getMessage());
            }
            byte [] bytesToSend = d.toByteArray();
            System.out.println(Arrays.toString(bytesToSend));
            serialPort.writeBytes(bytesToSend, bytesToSend.length); // escrever na porta os dados para enviar

        }else{

            byte[] bytesParaEnviar = Files.readAllBytes(Path.of(fileToSend));
            serialPort.writeBytes(inicioFile, inicioFile.length);   //escreve na porta o inicioFile primeiro

            while (bytesEscritos < bytesParaEnviar.length){ // escreve na porta todos os bytes para enviar
                bytesEscritos += serialPort.writeBytes(bytesParaEnviar, bytesParaEnviar.length, bytesEscritos);
            }

            inicioFile = endFile.getBytes(StandardCharsets.US_ASCII);
            serialPort.writeBytes(inicioFile, inicioFile.length);   // escreve na porta a mensagem de
        }

        txt.append("\nFicheiro enviado com sucesso");

    }


    public boolean ficheiroRecebido(byte[] dataReceived){
        return new String(dataReceived, StandardCharsets.US_ASCII).contains("MIETI-File");
    }
    public boolean ficheiroTextoTerminado(byte[] dataReceived){
        return new String(dataReceived, StandardCharsets.US_ASCII).contains("Ends");
    }
    public boolean ficheiroImagemTerminado(byte[] dataReceived){
        return new String(dataReceived, StandardCharsets.US_ASCII).contains("IEND");
    }

    public void saveReceivedFile() throws IOException {
        x++;
        ByteArrayOutputStream b = new ByteArrayOutputStream();
        System.out.println("A Guardar ficheiro \n\n");

        for(byte[] c: listadados){
            b.write(c);             //escrever os dados recebidos no ByteArrayOutputStream
        }


        String filePath = null, s = b.toString(StandardCharsets.US_ASCII);
        s = s.replaceAll("\00", "");
        s = s.replace("MIETI-File", "");
        s = s.replace("Ends", "");

        String f = "";
        if(s.contains("PNG")){
            f = "png";
        }else if (s.contains("<?xml version=")){
            f = "iml";
        }else{
            f = "txt";
        }

        filePath = Diretory + "/received" + x + "." + f;

        Files.deleteIfExists(Paths.get(filePath));
        Files.createFile(Paths.get(filePath));
        Files.write(Paths.get(filePath), s.getBytes());

        txt.append("\nO ficheiro foi recebido!");

        listadados.clear();

    }


    public void saveReceivedImage() throws IOException {
        x++;
        System.out.println("A Guardar Imagem \n\n");
        ByteArrayOutputStream byt = new ByteArrayOutputStream();

        for(byte[] b: listadados){
            //System.out.println(Arrays.toString(b));
            byt.write(b);   // escrever os dados recebidos no ByteArrayOutputStream
        }

        System.out.println("Size: "+byt.size());
        byte[] bytesToSave = byt.toByteArray();

        String filePaths = Diretory + "/recebido" + x + ".png";     //

        Files.deleteIfExists(Paths.get(filePaths));
        Files.createFile(Paths.get(filePaths));
        Files.write(Paths.get(filePaths), bytesToSave);

        txt.append("\nO ficheiro foi recebido!");

        listadados.clear();
    }

}